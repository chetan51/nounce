   Framework
.1   * NounceApplicationBridge (singleton)
.1     ~ (NSMutableDictionary *)notifications
.1     ~ (id)nounceDelegate

.1     + (id)sharedBridge

.1     - (NCNotification *)notificationWithID:(NSString *)notificationID;

.1     - (void)setNotification:(NCNotification *)notification forID:(NSString *)ID;

.1     - notify:(NCNotification *)notification
       
       - hide:(NCNotification *)notification
       
       - hideAll
       
       - expire:(NCNotification *)notification
	 
.2     - (void)inputWasSubmittedForNotification:(NSNotification *)inputWasSubmittedEvent

.2   * NounceDelegateProtocol
       - ^(NSString *)applicationName
 
.2     - ^(void)inputWasSubmittedForNotification:(NCNotification *)notification formName:(NSString *)formName buttonName:(NSString *)buttonName inputData:(NSDictionary *)inputData
       

   Application (Nounce Notification Center)
 1   * AppController
 1     ~ (NCNotificationPaneController *)notificationPaneController
 1     ~ (NCNotificationStatusController *)notificationStatusController
 1     ~ (NCEventController *)eventController
 
.1   * NotificationPane, NotificationStatus (shared Javascript client)
.1     - notify(String notificationID, String notificationTitle, HTML notificationContent, String fromAppID, String fromAppName, bool isUpdate)
       
 1   * NCEventController
         // Listens for public events through NCDistributedNotificationCenter and converts them into private events through NCNotificationCenter, and vice-versa.
 1     - (void)notificationWasPosted_public:(NSNotification *)notificationWasPostedEvent
       
       - (void)notificationWasHidden_public:(NSNotification *)notificationWasHiddenEvent
       
 2     - (void)inputWasSubmitted_private:(NSNotification *)inputWasSubmittedEvent
       
 1   * NCNotificationController
 1     ~ (NSMutableDictionary *)notifications
 
 1     - (void)notificationWasPosted:(NSNotification *)notificationWasPostedEvent
 
 1     - (NCNotification *)notificationWithID:(NSString *)ID
 
 1   * NCApplicationController
 1     ~ (NSMutableDictionary *)applications
 
 1     - (void)notificationWasPosted:(NSNotification *)notificationWasPostedEvent
 
 1     - (NCApplication *)applicationWithID:(NSString *)ID
 
 1   * NCNotificationPaneController
 1     - (void)notificationWasPosted:(NSNotification *)notificationWasPostedEvent
       
       - (void)notificationWasHidden:(NSNotification *)notificationWasHiddenEvent
	 
 1     - (void)showNotificationPane
	 
 1     - (void)hideNotificationPane
	 
       - (void)sortApplicationToTopOfNotificationPane:(NCApplication *)application
       
 1     - (void)notificationPaneWasShown
       
 1     - (void)notificationPaneWasHidden
 
 2     - (void)inputWasSubmittedForNotificationWithID:(NSString *)notificationID formName:(NSString *)formName buttonName:(NSString *)buttonName inputData:(NSString *)inputData
             // inputData is JSON string
             
 1     - (void)notificationStatusWasSelected:(NSNotification *)notificationStatusWasSelectedEvent
             
 1     - (void)notificationStatusWasUnselected:(NSNotification *)notificationStatusWasUnselectedEvent

 1   * NCNotificationStatusController
 1     - (void)notificationWasPosted:(NSNotification *)notificationWasPostedEvent
       
       - (void)notificationWasHidden:(NSNotification *)notificationWasHiddenEvent
	 
 1     - (void)selectNotificationStatusForApplicationWithID:(NSString *)applicationID
             // applicationID can be nil if no application in particular is to be selected
             
 1     - (void)unselectNotificationStatus
	 
 1     - (void)notificationStatusWasSelectedForApplicationWithID:(NSString *)applicationID
             // applicationID can be nil if no application in particular was selected
        
 1     - (void)notificationStatusWasUnselected
       
 1     - (void)notificationPaneWasShown:(NSNotification *)notificationPaneWasShownEvent
       
 1     - (void)notificationPaneWasHidden:(NSNotification *)notificationPaneWasHiddenEvent


   Shared Classes
.1   * NCNotification
.1     ~ (NSString *)id
           // Prefixed with the fromApp ID's namespace
.1     ~ (NCApplication *)fromApp
.1     ~ (NSString *)title
.1     ~ (NSString *)content
       ~ (NCNotificationType)type
       ~ (NCIcon *)icon
       ~ (NSString *)group
           // For grouping together notifications of the same app
       ~ (NCIcon *)groupIcon
           // For notification status area icon
	     // Note: If more than one notifications of the same group are posted by the same app, the group icon of the latest one will be used in the notification status area
.2     ~ (NSString *)input
       ~ (NSDate *)expires
       ~ (BOOL)isUpdate
           // Indicates whether this notification is an update to an existing one and shouldn't be considered a "new" notification

.1     + notificationWithTitle:(NSString *)title
.1         content:(NSString *)content
           type:(NCNotificationType)type (^)  // defaults to DONE
           icon:(NCIcon *)icon (^)
           group:(NSString *)group (^)
           groupIcon:(NCIcon *)groupIcon (^)
.2         input:(NSString *)input (^)  // in HTML format
           expires:(NSDate *)date
           
       * NCNotificationType
         # DONE
         # IN_PROGRESS
         # TIME_SENSITIVE
       
.1   * NCApplication
.1     ~ (NSString *)id
.1     ~ (NSString *)name
       ~ (NCIcon *)icon
.1     
.1     + applicationWithBundleIdentifier:(NSString *)bundleIdentifier

     * NCIcon
       ~ (NSString *)path
	 
       + iconWithPathRelativeToResources:(NSString *)path
	 
       + iconWithAbsolutePath:(NSString *)path
	 
       + iconWithImage:(NSImage *)image
	 

   Plugins
     Adium
.2     * NounceAdiumPlugin
.2       ~ (NSMutableDictionary *)chats
.2           // Contains NCAIChat's, indexed by chat's UID
.2       ~ (NSMutableDictionary *)chatForNotificationManifest
.2           // Contains mapping of notification ID to chat UID
.2           // Facilitates in selecting the chat for a given notification
         
.2       - messageReceived:(NSNotification *)messageReceievedEvent
         
.2       - messageSent:(NSNotification *)messageSentEvent
 
.2       - (void)saveChat:(NCAIChat *)chat

.2       - (void)saveNotificationForChat:(NCAIChat *)chat notification:(NCNotification *)notification

.2       - (NCAIChat *)getChatForAIChat:(AIChat *)givenChat
 
.2       - (NCAIChat *)getChatForNotification:(NCNotification *)notification

.2       - (NCAIMessage *)getMessageForContentMessage:(AIContentMessage *)contentMessage sentByMe:(BOOL)isSentByMe

.2       - appendMessageToChat:(NCAIChat *)chat message:(NCAIMessage *)message

.2       - sendMessage:(NSString *)message forChat:(NCAIChat *)
 
.2       - updateAndPostNotification:(NCAIChat *)chat numUnviewedMessages:(int)numUnviewedMessages
         
 2       - (void)inputWasSubmittedForNotification:(NCNotification *)notification formName:(NSString *)formName buttonName:(NSString *)buttonName inputData:(NSDictionary *)inputData
         
.2     * NCAIChat
.2       ~ (NSString *)ID
.2       ~ (AIChat *)aiChat
.2       ~ (AIListObject *)aiSender
.2       ~ (AIListObject *)aiMe
.2       ~ (NSString *)name
.2       ~ (NSMutableArray *)newMessages
.2       ~ (NCNotification *)currentNotification
 
.2     * NCAIMessage
.2       ~ (bool)isSenderSelf
.2       ~ (NSString *)senderName
.2       ~ (NSString *)message


Unsorted:
       - UIShowNotificationBubbleWithNotifications:(NSArray *)notifications
       
       - NCNotificationHoveredWithID:(NSString *)notificationID
       
       - NCNotificationClickedWithID:(NSString *)notificationID
       
       - NCNotificationHideClickedWithID:(NSString *)notificationID
       
       
Event Type Reference (NSNotification Types, names defined in NCNounceProtocol)

  Public Events
    * notificationWasPostedEvent (Nounce_NotificationWasPosted)
      ~ object: (NSString *)applicationID
      ~ userData: @"Notification" => (NCNotification *)notification
       
    * notificationWasHiddenEvent (Nounce_NotificationWasHidden)
      ~ object: (NSString *)applicationID
      ~ userData: @"Notification" => (NCNotification *)notification
       
  Public and Private Events
    * inputWasSubmittedEvent (Nounce_InputWasSubmitted)
      ~ object: (NSString *)applicationID
      ~ userData: @"Notification" => (NCNotification *)notification, @"InputData" => (NSDictionary *)inputData, @"FormName" => (NSString *)formName, @"ButtonName" => (NSString *)buttonName

  Private Events
    * notificationPaneWasShown (Nounce_NotificationPaneWasShown)
      ~ object: (NSString *)applicationID
      
    * notificationPaneWasHidden (Nounce_NotificationPaneWasHidden)
      ~ object: (NSString *)applicationID
      
    * notificationStatusWasSelected (Nounce_NotificationStatusWasSelected)
      ~ object: (NSString *)applicationID
      ~ userData: @"SelectedApplication" => (NCApplication *)application
        // SelectedApplication can be nil
 
    * notificationStatusWasUnselected (Nounce_NotificationStatusWasUnselected)
      ~ object: (NSString *)applicationID
 
     
Design decisions
  How the observer pattern is implemented in Nounce
    * Commands or events that are relevant to only the Nounce application are all in form of private events (through NSNotificationCenter), and events that are relevant to other applications are in the form of public events (through NSDistributedNotificationCenter).
    * Commands sent to the Nounce application from other applications (such as hiding a notification) are received as public events, and are converted into private events before they can control the Nounce application.
    * Public events are distributed with the 'object' set to the relevant receiver's ID, so that a receiver can listen for only the public events that are relevant to them. Private events are distributed with the 'object' set to the relevant sender's ID.