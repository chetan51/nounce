   Framework
 1   * NounceApplicationBridge (singleton)
 1     ~ (NounceApplicationBridge *)applicationBridge
 1     ~ (NSMutableDictionary *)notifications
 1     ~ (id)nounceDelegate

 1     + (NounceApplicationBridge *)sharedBridge

.1     - notify:(NCNotification *)notification
       
       - hide:(NCNotification *)notification
       
       - hideAll
       
       - expire:(NCNotification *)notification
	 
 2     - (void)inputWasSubmittedForNotification:(NSNotification *)inputSubmitted

 1   * NounceDelegateProtocol
       - ^(NSString *)applicationName
 
 2     - ^(void)inputWasSubmittedForNotification:(NCNotification *)notification formName:(NSString *)formName buttonName:(NSString *)buttonName inputData:(NSDictionary *)inputData
       

   Application (Nounce Notification Center)
 1   * AppController
 1     ~ (NCNotificationPaneController *)notificationPaneController
 1     ~ (NCNotificationStatusController *)notificationStatusController
 2     ~ (NCNotificationController *)notificationController
 
.1   * NotificationPane, NotificationStatus (shared Javascript client)
.1     - notify (String notificationID, String notificationTitle, HTML notificationContent, String fromAppID, String fromAppName)
       
 1   * NCDistributedMessageController
         // Listens for distributed messages through NCDistributedNotificationCenter and converts them into local messages
 1     - (void)notificationWasPosted:(NSNotification *)notificationPosted
       
 2     - (void)notificationWasHidden:(NSNotification *)notificiationHidden
       
 2   * NCNotificationController
 2     ~ (NSMutableDictionary *)notifications
             // Indexed by notification ID
       
 2     - (NCNotification *)notificationWithID:(NSString *)ID
 
       - (NSArray *)notificationsFromApplication:(NCApplication *)application
 
 1   * NCNotificationPaneController
 1     - (void)showNotificationPane
	 
 1     - (void)hideNotificationPane
	 
 1     - (void)notificationWasPosted:(NSNotification *)notificationPosted
	 
       - (void)notificationWasHidden:(NSNotification *)notificationHidden
	 
 2     - submitInputForNotificationWithID:(NSString *)notificationID formName:(NSString *)formName buttonName:(NSString *)buttonName inputData:(NSString *)inputData
             // inputData is JSON string

 2     - (void)inputWasSubmittedForNotification:(NSNotification *)inputSubmitted
 
 1   * NCNotificationStatusController
 1     - (void)notificationWasPosted:(NSNotification *)notificationPosted
       
       - (void)notificationWasHidden:(NSNotification *)notificationHidden


   Shared Classes
.1   * NCNotification
.1     ~ (NSString *)id
           // Prefixed with the fromApp ID's namespace
.1     ~ (NCApplication *)fromApp
.1     ~ (NSString *)title
.1     ~ (NSString *)content
       ~ (NCNotificationType)type
       ~ (NCIcon *)icon
       ~ (NSString *)group
           // For grouping together notifications of the same app
       ~ (NCIcon *)groupIcon
           // For notification status area icon
	     // Note: If more than one notifications of the same group are posted by the same app, the group icon of the latest one will be used in the notification status area
.2     ~ (NSString *)input
       ~ (NSDate *)expires

.1     + notificationWithTitle:(NSString *)title
.1         content:(NSString *)content
           type:(NCNotificationType)type (^)  // defaults to DONE
           icon:(NCIcon *)icon (^)
           group:(NSString *)group (^)
           groupIcon:(NCIcon *)groupIcon (^)
.2         input:(NSString *)input (^)  // in HTML format
           expires:(NSDate *)date
           
       * NCNotificationType
         # DONE
         # IN_PROGRESS
         # TIME_SENSITIVE
       
.1   * NCApplication
.1     ~ (NSString *)id
.1     ~ (NSString *)name
       ~ (NCIcon *)icon
.1     
.1     + applicationWithBundleIdentifier:(NSString *)bundleIdentifier

     * NCIcon
       ~ (NSString *)path
	 
       + iconWithPathRelativeToResources:(NSString *)path
	 
       + iconWithAbsolutePath:(NSString *)path
	 
       + iconWithImage:(NSImage *)image
	 

   Plugins
     Adium
.2     * NounceAdiumPlugin
.2       ~ (NSMutableDictionary *)chats
.2           // Contains NCAIChat's, indexed by chat's UID
.2       ~ (NSMutableDictionary *)chatForNotificationManifest
.2           // Contains mapping of notification ID to chat UID
.2           // Facilitates in selecting the chat for a given notification
         
.2       - messageReceived:(NSNotification *)notification
         
.2       - messageSent:(NSNotification *)notification
 
.2       - (void)saveChat:(NCAIChat *)chat

.2       - (void)saveNotificationForChat:(NCAIChat *)chat notification:(NCNotification *)notification

.2       - (NCAIChat *)getChatForAIChat:(AIChat *)givenChat
 
.2       - (NCAIChat *)getChatForNotification:(NCNotification *)notification

.2       - (NCAIMessage *)getMessageForContentMessage:(AIContentMessage *)contentMessage sentByMe:(BOOL)isSentByMe

.2       - appendMessageToChat:(NCAIChat *)chat message:(NCAIMessage *)message

.2       - sendMessage:(NSString *)message forChat:(NCAIChat *)
 
.2       - updateAndPostNotification:(NCAIChat *)chat numUnviewedMessages:(int)numUnviewedMessages
         
 2       - (void)inputWasSubmittedForNotification:(NCNotification *)notification formName:(NSString *)formName buttonName:(NSString *)buttonName inputData:(NSDictionary *)inputData
         
.2     * NCAIChat
.2       ~ (NSString *)ID
.2       ~ (AIChat *)aiChat
.2       ~ (AIListObject *)aiSender
.2       ~ (AIListObject *)aiMe
.2       ~ (NSString *)name
.2       ~ (NSMutableArray *)newMessages
.2       ~ (NCNotification *)currentNotification
 
.2     * NCAIMessage
.2       ~ (bool)isSenderSelf
.2       ~ (NSString *)senderName
.2       ~ (NSString *)message


Unsorted:
       - UISortApplicationToTopOfNotificationPane:(NSApplication *)application
       
       - UIShowNotificationBubbleWithNotifications:(NSArray *)notifications
       
       - NCNotificationHoveredWithID:(NSString *)notificationID
       
       - NCNotificationClickedWithID:(NSString *)notificationID
       
       - NCNotificationHideClickedWithID:(NSString *)notificationID
       
       
NSNotification Type Reference 
 * notificationPosted (Nounce_NotificationPosted)
   ~ object: (NCNotification *)notification
   
 * notificationHidden (Nounce_NotificationHidden)
   ~ object: (NCNotification *)notification
   
 * inputSubmitted (Nounce_NotificationInputSubmitted)
   ~ object: (NCNotification *)notification
   ~ userData: @"InputData" => (NSDictionary *)inputData, @"FormName" => (NSString *)formName, @"ButtonName" => (NSString *)buttonName
 
     
Design decisions
  How the observer pattern is implemented in Nounce
    * Commands or events that are relevant to only the Nounce application are all in form of local messages (through NSNotificationCenter), and events that are relevant to other applications are in the form of distributed messages (through NSDistributedNotificationCenter).
    * Commands sent to the Nounce application from other applications (such as hiding a notification) are received as distributed messages, and are converted into local messages before they can control the Nounce application.